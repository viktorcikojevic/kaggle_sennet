defaults:
  - _self_
  - model: smp_unet_r50_upsample_x4
  - augmentation: multi_channel_augmentation
  - early_stopping: normal
#  - augmentation: noop
  - scheduler: none
  - optimiser: adamw
  - override hydra/sweeper: optuna
  - override hydra/sweeper/sampler: tpe

val_check_interval: 20000
batch_size: 6 # final batch size.
apparent_batch_size: 6 # batch size during training
num_workers: 1
dry_logger: false
quit_immediately: false # just prints out the config and exits, useful for debugging
exp_name: three_d_seg
group_name: "r18_upsample" # maybe this would be useful for grouping experiments when we do hyperparameter search
max_epochs: 100
max_steps: -1
early_stopping_metric: "surface_dice"
#early_stopping_metric: "f1_score"

loss:
  - type: BCELoss
    weight: 0.001
  - type: MccLoss
    weight: 0.001
  - type: DiceLoss
    weight: 0.4
    kwargs:
      smooth: 0.0001
  - type: FocalLoss
#    weight: 1.0
    weight: 0.6
    kwargs:
      gamma: 2.0

task:
  kwargs:
    eval_threshold: 0.2
    compute_crude_metrics: false
    ema_momentum: 0.00025
#    ema_momentum: null
#    ignore_border_loss: true
    ignore_border_loss: false

train_folders:
  - kidney_1_dense
  # - kidney_3_dense
#  - kidney_2

val_folders:
#  - kidney_1_dense
   - kidney_3_dense
#   - kidney_3_merged
#  - kidney_2
#   - kidney_3_sparse

batch_transform:
  kwargs:
    alpha_cutmix: 0.4
    alpha_mixup: 0.4
    cutmix_prob: 0.3
    mixup_prob: 0.0

dataset:
  train_substride: 1.0
  val_substride: 1.0
  kwargs:
    crop_size: 384
#    crop_size: 896
    cropping_border: 0
    n_take_channels: 1 # Number of channels to take from the dataset
    n_appereant_channels: 1
    reduce_zero_label: False
    assert_label_exists: True
    channel_start: 0
    channel_end: null
    sample_with_mask: false

    crop_size_range: [0.8, 1.2]
#    crop_size_range: null
    p_crop_size_noise: 0.25
    p_crop_size_keep_ar: 0.8
    output_crop_size: null
    to_float32: true
    load_ann: true
    seg_fill_val: 0
    crop_location_noise: 0.5
    p_crop_location_noise: 1.0

#    p_random_3d_rotation: 1.0
    p_random_3d_rotation: 0.1
    rot_magnitude_normal_deg: 90.0
    rot_magnitude_plane_deg: 90.0

    # These three allow for rotation and flip augmentation
    add_depth_along_channel: true
    add_depth_along_width: true
    add_depth_along_height: true

    normalisation_kwargs:
      mean: 0.5
      std: 0.235
      normalise_by_mean_and_std: false
#      normalise_by_mean_and_std: true
      normalisation_percentile: 1
      leak_gradient: 1e-3

hydra:
  sweeper:
    sampler:
      seed: 1337
    direction: maximize
    storage: null
    n_trials: 100
    n_jobs: 1
    params:
      # model.kwargs.encoder_name: choice("resnet18", "resnet34", "resnet50", "resnet101")
      # optimiser.log_lr: range(-5, -3, 0.1)
      # dataset.kwargs.crop_size: range(64, 512, 64)
#      dataset.kwargs.n_take_channels: range(1, 5, 1)
      dataset.kwargs.p_random_3d_rotation: range(0.0, 1.0, 0.1)
      # dataset.kwargs.p_crop_size_noise: range(0.2, 1.0, 0.2)
#      batch_size: range(4, 128, 4)

#      batch_transform.kwargs.alpha_cutmix: range(0.01, 1.0, 0.1)
#      batch_transform.kwargs.alpha_mixup: range(0.01, 1.0, 0.1)
#      batch_transform.kwargs.cutmix_prob: range(0.0, 1.0, 0.1)
#      batch_transform.kwargs.mixup_prob: range(0.0, 1.0, 0.1)
      # loss.0.weight: range(0.0, 1.0, 0.1)
      # loss.1.weight: range(0.0, 1.0, 0.1)
      # loss.2.weight: range(0.0, 1.0, 0.1)
      # loss.3.weight: range(0.0, 1.0, 0.1)
#      augmentation.augmenter_kwargs.p_any_augm: range(0.0, 1.0, 0.1)
